# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Messere\Cart\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Messere\Cart\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Ramsey\Uuid\UuidFactoryInterface:
        class: Ramsey\Uuid\UuidFactory

    PDO:
        class: \PDO
        factory: ['Messere\Cart\Infrastructure\PdoServiceFactory', createPdo]

    SimpleBus\Message\Bus\MessageBus:
        public: true
        alias: simple_bus.event_bus

    Messere\Cart\Domain\Product\Command\AddProductHandler:
        public: true
        class: Messere\Cart\Domain\Product\Command\AddProductHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Product\Command\AddProductCommand }

    Messere\Cart\Domain\Product\Command\RemoveProductHandler:
        public: true
        class: Messere\Cart\Domain\Product\Command\RemoveProductHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Product\Command\RemoveProductCommand }

    Messere\Cart\Domain\Product\Command\UpdateProductHandler:
        public: true
        class: Messere\Cart\Domain\Product\Command\UpdateProductHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Product\Command\UpdateProductCommand }

    Messere\Cart\Domain\Cart\Command\AddCartHandler:
        public: true
        class: Messere\Cart\Domain\Cart\Command\AddCartHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Cart\Command\AddCartCommand }

    Messere\Cart\Domain\Cart\Command\AddProductToCartHandler:
        public: true
        class: Messere\Cart\Domain\Cart\Command\AddProductToCartHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Cart\Command\AddProductToCartCommand }

    Messere\Cart\Domain\Cart\Command\RemoveProductFromCartHandler:
        public: true
        class: Messere\Cart\Domain\Cart\Command\RemoveProductFromCartHandler
        tags:
        - { name: command_handler, handles: Messere\Cart\Domain\Cart\Command\RemoveProductFromCartCommand }

    Messere\Cart\Domain\CartProduct\EventHandler\ProductCreatedHandler:
        public: true
        class: Messere\Cart\Domain\CartProduct\EventHandler\ProductCreatedHandler
        tags:
        - { name: event_subscriber, subscribes_to: Messere\Cart\Domain\Product\Event\ProductCreatedEvent }

    Messere\Cart\Domain\CartProduct\EventHandler\ProductRemovedHandler:
        public: true
        class: Messere\Cart\Domain\CartProduct\EventHandler\ProductRemovedHandler
        tags:
        - { name: event_subscriber, subscribes_to: Messere\Cart\Domain\Product\Event\ProductRemovedEvent }

    Messere\Cart\Domain\CartProduct\EventHandler\ProductUpdatedHandler:
        public: true
        class: Messere\Cart\Domain\CartProduct\EventHandler\ProductUpdatedHandler
        tags:
        - { name: event_subscriber, subscribes_to: Messere\Cart\Domain\Product\Event\ProductUpdatedEvent }
